include "application.conf"

kafka = "127.0.0.1:9092"
kafka = ${?TC_KAFKA}

tcontroller {
  db = {
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
    properties = {
      serverName = "pg"
      databaseName = "controller"
      user = "postgres"
      password = "postgres"
    }
    create = true
  }
  msgdb = {
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
    properties = {
      serverName = "pg"
      databaseName = "messages"
      user = "postgres"
      password = "postgres"
    }
    create = true
  }

  log.produced-results = false
  log.failed-responses = true
  #log.thread-dumps = true
  http-client.save-failed-responses = /logs/f
  log.service-stats-interval = 10s
  services = [
      {
      service-id = "slow1"
      servers = [{
        url = "http://failer:5000/slow1"
        parallelism = 4
      }]
      service-type = "batch"
      max-batch = 10
    }
  ]
  pipelines {
  }
  configapi {
    db = {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      properties = {
        serverName = "pg"
        databaseName = "configapi"
        user = "postgres"
        password = "postgres"
      }
      create = true
    }
    kafkaSource {
                type = "kafka-source"
                server = ${kafka}
                groupId = "tc-test"
                parallelism = 100
                outType = json
    }
    userServices {
        imageBuildPath = /logs/imgs
    }
    resultType = none
    transforms {
        dedup {
            description = "dedup"
            inType = json
            outType = json
            params = ""
            dedup {
              enabled = true
            }
            onDuplicate {
              type = assert
              cond = "! toJsonString(message.seq_num) == '13'"
            }
            preDedup = [
              { type = assert
                cond = "! toJsonString(seq_num) == '14'"
              },
              { type = merge
                merge-fields {
                  pre-dedup = 1
                }
              },
            ]
        }
        addx {
            description = "add x"
            inType = json
            outType = json
            stepTemplate = [
              {
                type = merge
                merge-fields {
                  x = x
                }
              },
            ]
            params = ""
        }
        addxx {
            description = "add xx"
            inType = json
            outType = json
            stepTemplate = [
              {
                type = merge
                merge-fields {
                  x = xx
                }
              },
            ]
            params = ""
        }
        addy {
            description = "bad"
            inType = json
            outType = xxx
            stepTemplate = [
              {
                type = merge
                merge-fields {
                  x = x
                }
              },
            ]
            params = ""
        }
        slow1 {
            description = "slow1"
            inType = json
            outType = json
            stepTemplate = [
              {
                type = service-replace
                service-id = "slow1"
              },
            ]
            params = ""
        }
        topic {
            description = topic sink
            params = ""
            inType = json
            outType = none
            stepTemplate = [
               {
                  type = replace
                  replace-with = "{{'{'}}{toJsonString($)}}"
               },
            ]
            sinkTemplate = {
              type = "kafka-sink"
              server = ${kafka}
              group-id = "tc-test"
              topic = "{{params.topic}}"
            }
        }

    }
  }
}
